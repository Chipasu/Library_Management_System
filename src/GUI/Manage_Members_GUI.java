package GUI;


import DB.DB;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Extreme
 */
public class Manage_Members_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Manage_Members_GUI
     */
    public Manage_Members_GUI() {
        initComponents();
        disabling();
         setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Member_ID = new javax.swing.JTextField();
        fname = new javax.swing.JTextField();
        lname = new javax.swing.JTextField();
        address = new javax.swing.JTextField();
        gender = new javax.swing.JComboBox();
        contactno = new javax.swing.JTextField();
        email = new javax.swing.JTextField();
        subject = new javax.swing.JTextField();
        no_of_books = new javax.swing.JTextField();
        grade = new javax.swing.JTextField();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        search = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        addmember = new javax.swing.JButton();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        edit = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        reset = new javax.swing.JButton();
        back = new javax.swing.JButton();
        DOR = new com.toedter.calendar.JDateChooser();
        DOB = new com.toedter.calendar.JDateChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Manage Members");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/title ori.jpg"))); // NOI18N

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Library Management System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "Manage Members", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Member ID");
        jLabel2.setBounds(20, 40, 70, 14);
        jLayeredPane2.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("First Name");
        jLabel3.setBounds(20, 70, 70, 30);
        jLayeredPane2.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel4.setText("Last Name");
        jLabel4.setBounds(20, 120, 70, 14);
        jLayeredPane2.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel5.setText("Address");
        jLabel5.setBounds(20, 150, 60, 14);
        jLayeredPane2.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel6.setText("Date of Birth");
        jLabel6.setBounds(20, 190, 80, 14);
        jLayeredPane2.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setText("Gender");
        jLabel7.setBounds(20, 230, 60, 14);
        jLayeredPane2.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel8.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel8.setText("Contact Number");
        jLabel8.setBounds(20, 270, 100, 14);
        jLayeredPane2.add(jLabel8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel9.setText("Email");
        jLabel9.setBounds(20, 310, 40, 20);
        jLayeredPane2.add(jLabel9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel10.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel10.setText("Number of Books");
        jLabel10.setBounds(20, 390, 100, 14);
        jLayeredPane2.add(jLabel10, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel11.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel11.setText("Grade");
        jLabel11.setBounds(20, 430, 32, 14);
        jLayeredPane2.add(jLabel11, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel12.setText("Date of Registration");
        jLabel12.setBounds(20, 350, 110, 14);
        jLayeredPane2.add(jLabel12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel13.setText("Subject");
        jLabel13.setBounds(20, 470, 50, 14);
        jLayeredPane2.add(jLabel13, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Member_ID.setBounds(140, 40, 230, 20);
        jLayeredPane2.add(Member_ID, javax.swing.JLayeredPane.DEFAULT_LAYER);
        fname.setBounds(140, 80, 230, 20);
        jLayeredPane2.add(fname, javax.swing.JLayeredPane.DEFAULT_LAYER);
        lname.setBounds(140, 120, 230, 20);
        jLayeredPane2.add(lname, javax.swing.JLayeredPane.DEFAULT_LAYER);
        address.setBounds(140, 150, 230, 20);
        jLayeredPane2.add(address, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gender.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        gender.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Male", "Female" }));
        gender.setBounds(140, 230, 240, 20);
        jLayeredPane2.add(gender, javax.swing.JLayeredPane.DEFAULT_LAYER);
        contactno.setBounds(140, 270, 240, 20);
        jLayeredPane2.add(contactno, javax.swing.JLayeredPane.DEFAULT_LAYER);
        email.setBounds(140, 310, 240, 20);
        jLayeredPane2.add(email, javax.swing.JLayeredPane.DEFAULT_LAYER);
        subject.setBounds(140, 470, 230, 20);
        jLayeredPane2.add(subject, javax.swing.JLayeredPane.DEFAULT_LAYER);
        no_of_books.setBounds(140, 390, 230, 20);
        jLayeredPane2.add(no_of_books, javax.swing.JLayeredPane.DEFAULT_LAYER);
        grade.setBounds(140, 430, 230, 20);
        jLayeredPane2.add(grade, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Search-Search-icon1`.png"))); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.setBounds(20, 20, 90, 25);
        jLayeredPane3.add(search, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/view.png"))); // NOI18N
        jButton2.setText("View All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setBounds(130, 20, 90, 25);
        jLayeredPane3.add(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(480, 60, 240, 70);
        jLayeredPane2.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        addmember.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/add_user.png"))); // NOI18N
        addmember.setText("Add Member");
        addmember.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addmemberActionPerformed(evt);
            }
        });
        addmember.setBounds(490, 150, 230, 25);
        jLayeredPane2.add(addmember, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        edit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/reset.png"))); // NOI18N
        edit.setText("Edit");
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });
        edit.setBounds(20, 10, 210, 25);
        jLayeredPane4.add(edit, javax.swing.JLayeredPane.DEFAULT_LAYER);

        update.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/edit.png"))); // NOI18N
        update.setText("Update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        update.setBounds(20, 60, 90, 25);
        jLayeredPane4.add(update, javax.swing.JLayeredPane.DEFAULT_LAYER);

        delete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/delete.png"))); // NOI18N
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        delete.setBounds(140, 60, 90, 25);
        jLayeredPane4.add(delete, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane4.setBounds(470, 240, 250, 110);
        jLayeredPane2.add(jLayeredPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        reset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/reset.gif"))); // NOI18N
        reset.setText("Reset");
        reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetActionPerformed(evt);
            }
        });
        reset.setBounds(490, 450, 90, 30);
        jLayeredPane2.add(reset, javax.swing.JLayeredPane.DEFAULT_LAYER);

        back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/back1.png"))); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });
        back.setBounds(630, 450, 90, 30);
        jLayeredPane2.add(back, javax.swing.JLayeredPane.DEFAULT_LAYER);
        DOR.setBounds(140, 350, 240, 20);
        jLayeredPane2.add(DOR, javax.swing.JLayeredPane.DEFAULT_LAYER);
        DOB.setBounds(140, 190, 240, 20);
        jLayeredPane2.add(DOB, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBounds(20, 30, 750, 510);
        jLayeredPane1.add(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu2.setText("Navigate");

        jMenuItem8.setText("Home");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem2.setText("Manage Members");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Manage Books");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Manage Book Lending");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Manage Inventory");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Manage Newspaper Reocords");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Manage User Accounts");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-816)/2, (screenSize.height-681)/2, 816, 681);
    }// </editor-fold>//GEN-END:initComponents

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
         if (Member_ID.getText().equals("")) 
         {
            JOptionPane.showMessageDialog(this, "Please enter the Member ID you wish to Search ","",JOptionPane.WARNING_MESSAGE);
         }
         else
         {
    
            try 
            {
            String Memberid=Member_ID.getText();
            Connection con = DB.myCon();
            Statement S = con.createStatement();
            ResultSet rs=null;
         //selecting member table   
            if(Memberid.charAt(0)=='S')
            {
                
                   
                rs = S.executeQuery("SELECT * FROM student WHERE SmemberID='" +Memberid+ "'");
                    if (rs.next()) 
                        {
                             enablings();
                        fname.setText(rs.getString("FName"));
                        lname.setText(rs.getString("LName"));
                        address.setText(rs.getString("Address"));
                        DOB.setDate(rs.getDate("DateOfBirth"));
                        DOR.setDate(rs.getDate("DateOfRegistration"));
                        gender.setSelectedItem(rs.getString("Gender"));
                        contactno.setText(rs.getString("ContactNumber"));
                        email.setText(rs.getString("Email"));
                        no_of_books.setText(rs.getString("NoOfBooks"));
                        grade.setText(rs.getString("Grade"));
                        


                        } 
                    else
                        {
                        JOptionPane.showMessageDialog(this, " No such Member  !","",JOptionPane.ERROR_MESSAGE);
                        Member_ID.setText("");
                        }
                   
            }
            else if(Memberid.charAt(0)=='T')
            {
                enablingt();
                 rs = S.executeQuery("SELECT * FROM teacher WHERE TmemberID='" +Memberid+ "'"); 
                 
                 if (rs.next()) 
                        {
                        fname.setText(rs.getString("FName"));
                        lname.setText(rs.getString("LName"));
                        address.setText(rs.getString("Address"));
                        DOB.setDate(rs.getDate("DateOfBirth"));
                        DOR.setDate(rs.getDate("DateOfRegistration"));
                        gender.setSelectedItem(rs.getString("Gender"));
                        contactno.setText(rs.getString("ContactNumber"));
                        email.setText(rs.getString("Email"));
                        no_of_books.setText(rs.getString("NoOfBooks"));
                        subject.setText(rs.getString("Subject"));


                        } 
                    else
                        {
                        JOptionPane.showMessageDialog(this, " No such Member  !","",JOptionPane.ERROR_MESSAGE);
                        Member_ID.setText("");
                        }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter a correct ID ","",JOptionPane.ERROR_MESSAGE);
            }
            
            //displayinig values
        
            }
            
            catch (Exception e) {
                    JOptionPane.showMessageDialog(this, ""+e.getMessage()+" Error,  ","",JOptionPane.ERROR_MESSAGE);
                }
         }
    }//GEN-LAST:event_searchActionPerformed

    private void resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetActionPerformed
                 reseting();
               disabling();
               Member_ID.setEnabled(true);
               Member_ID.setText("");
    }//GEN-LAST:event_resetActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        
         
         
         if (Member_ID.getText().equals("")) 
         {
            JOptionPane.showMessageDialog(this, "Please enter the Member ID you wish to edit ","",JOptionPane.WARNING_MESSAGE);
         }
         else
         {
    
            try 
            {
            String Memberid=Member_ID.getText();
            Connection con = DB.myCon();
            Statement S = con.createStatement();
            ResultSet rs=null;
         //selecting member table   
            if(Memberid.charAt(0)=='S')
            {
                
                rs = S.executeQuery("SELECT * FROM student WHERE SmemberID='" +Memberid+ "'");
                    if (rs.next()) 
                        {
                            enablings();
                update.setEnabled(true);
                delete.setEnabled(true);
                        fname.setText(rs.getString("FName"));
                        lname.setText(rs.getString("LName"));
                        address.setText(rs.getString("Address"));
                        DOB.setDate(rs.getDate("DateOfBirth"));
                        DOR.setDate(rs.getDate("DateOfRegistration"));
                        gender.setSelectedItem(rs.getString("Gender"));
                        contactno.setText(rs.getString("ContactNumber"));
                        email.setText(rs.getString("Email"));
                        no_of_books.setText(rs.getString("NoOfBooks"));
                        grade.setText(rs.getString("Grade"));
                        


                        } 
                    else
                        {
                        JOptionPane.showMessageDialog(this, " No such Member  !","",JOptionPane.ERROR_MESSAGE);
                        Member_ID.setText("");
                        update.setEnabled(false);
                        delete.setEnabled(false);
                        disabling();
                        }
                   
            }
            else if(Memberid.charAt(0)=='T')
            {
                enablingt();
                update.setEnabled(true);
                delete.setEnabled(true);
                
                 rs = S.executeQuery("SELECT * FROM teacher WHERE TmemberID='" +Memberid+ "'"); 
                 
                 if (rs.next()) 
                        {
                        fname.setText(rs.getString("FName"));
                        lname.setText(rs.getString("LName"));
                        address.setText(rs.getString("Address"));
                        DOB.setDate(rs.getDate("DateOfBirth"));
                        DOR.setDate(rs.getDate("DateOfRegistration"));
                        gender.setSelectedItem(rs.getString("Gender"));
                        contactno.setText(rs.getString("ContactNumber"));
                        email.setText(rs.getString("Email"));
                        no_of_books.setText(rs.getString("NoOfBooks"));
                        subject.setText(rs.getString("Subject"));


                        } 
                    else
                        {
                        JOptionPane.showMessageDialog(this, " No such Member  !","",JOptionPane.ERROR_MESSAGE);
                        Member_ID.setText("");
                          update.setEnabled(false);
                        delete.setEnabled(false);
                         disabling();
                        }
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Please enter a correct ID ","",JOptionPane.ERROR_MESSAGE);
            }
            
            //displayinig values
        
            }
            
            
            catch (Exception e) {
                    JOptionPane.showMessageDialog(this, ""+e.getMessage()+" Error,!","",JOptionPane.ERROR_MESSAGE);
                }
         }
         
        
    }//GEN-LAST:event_editActionPerformed

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        try
        
        {
             int b = JOptionPane.showConfirmDialog(null, "Do you want to Update ?", "Confirm", JOptionPane.YES_NO_OPTION);
        if (b == 0) {
        
        DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
      
      
    

        String Memberid=Member_ID.getText();
        String Gender=(String) gender.getSelectedItem();
        String Email1=email.getText();
        
        if(Memberid.charAt(0)=='S')
        {
        
            if (fname.getText().equals("") || lname.getText().equals("")||address.getText().equals("")||contactno.getText().equals("")||email.getText().equals("")||Gender.equals("Select")||no_of_books.getText().equals("")||grade.getText().equals("")||DOB.getDate()==null||DOR.getDate()==null) 
            {
                JOptionPane.showMessageDialog(this, "Please fill in all fields ", "",JOptionPane.WARNING_MESSAGE);
            }
        
             else if(!(contactno.getText().length()==10)||(Long.parseLong(contactno.getText())<0))
            {
                JOptionPane.showMessageDialog(this, "Please fill the contact number field correctly ", "",JOptionPane.WARNING_MESSAGE);
            }
             
              else if((Integer.parseInt(grade.getText())<8)||(Integer.parseInt(grade.getText())>13))
            {
            JOptionPane.showMessageDialog(this, "Please fill the Grade number field correctly ", "",JOptionPane.WARNING_MESSAGE);
            }
        
         
              else if(!((Email1.indexOf("@")>0)&&((Email1.indexOf(".")-Email1.indexOf("@"))>0)&&(((Email1.length()-1)-Email1.indexOf("."))>1)))
                {
                    JOptionPane.showMessageDialog(this, "Please fill the Email field correctly ", "",JOptionPane.WARNING_MESSAGE);
                }
     
        else
        {
            
                
                String Fname=fname.getText();
        String Lname=lname.getText();
        
        String Address=address.getText();
          Gender=(String) gender.getSelectedItem();
         int ContactNO=Integer.parseInt(contactno.getText());
         String Email=email.getText();
        int NoOfBooks= Integer.parseInt(no_of_books.getText());
         int Grade=Integer.parseInt(grade.getText());
         Date D1=DOB.getDate();
         Date D2=DOR.getDate();
         
       
         String DateOfBirth=(String) dateFormat.format(D1);
          String DateOfRegistration=(String) dateFormat.format(D2);
        
   
          
        Connection con = DB.myCon();
            Statement stmt = con.createStatement();
         String query1=  "UPDATE student SET Fname = '"+Fname+"', Lname ='"+Lname+"', Address ='"+Address+"' , DateOfBirth='"+DateOfBirth+"',DateOfRegistration='"+DateOfRegistration+"', Gender ='"+Gender+"', ContactNumber ='"+contactno.getText()+"', Email='"+Email+"', NoOfBooks ="+NoOfBooks+", Grade ="+Grade+" WHERE SmemberID = '"+Memberid+"'";
        
              stmt.executeUpdate(query1);
            
           
            
         
           
           JOptionPane.showMessageDialog(this,"Updated Student Member Details Successfully");
           reseting();
           disabling();
           
            
            
            
            
        }
            }
            else if(Memberid.charAt(0)=='T')
            {
                
                
               if (fname.getText().equals("") || lname.getText().equals("")||address.getText().equals("")||contactno.getText().equals("")||email.getText().equals("")||Gender.equals("Select")||no_of_books.getText().equals("")||subject.getText().equals("")||DOB.getDate()==null||DOR.getDate()==null) 
                 {
                    JOptionPane.showMessageDialog(this, "Please fill in all fields ", "",JOptionPane.WARNING_MESSAGE);
                 }
               
               else if(!(contactno.getText().length()==10)||(Integer.parseInt(contactno.getText())<0))
                {
                    JOptionPane.showMessageDialog(this, "Please fill the contact number field correctly ", "",JOptionPane.WARNING_MESSAGE);
                }
        
         
                else if(!((Email1.indexOf("@")>0)&&((Email1.indexOf(".")-Email1.indexOf("@"))>0)&&(((Email1.length()-1)-Email1.indexOf("."))>1)))
                {
                    JOptionPane.showMessageDialog(this, "Please fill the Email field correctly ", "",JOptionPane.WARNING_MESSAGE);
                }
     
            else
            {
            
                     
                String Fname=fname.getText();
        String Lname=lname.getText();
        
        String Address=address.getText();
          Gender=(String) gender.getSelectedItem();
         int ContactNO=Integer.parseInt(contactno.getText());
         String Email=email.getText();
        int NoOfBooks= Integer.parseInt(no_of_books.getText());
         String Subject=subject.getText();
         String DateOfBirth=dateFormat.format(DOB);
          String DateOfRegistration=dateFormat.format(DOR);
        
   
          
        Connection con = DB.myCon();
            Statement stmt = con.createStatement();
         String query1=  "UPDATE teacher SET Fname = '"+Fname+"', Lname ='"+Lname+"', Address ='"+Address+"' , DateOfBirth='"+DateOfBirth+"',DateOfRegistration='"+DateOfRegistration+"', Gender ='"+Gender+"', ContactNumber ='"+contactno.getText()+"', Email='"+Email+"', NoOfBooks ="+NoOfBooks+", Subject ='"+Subject+"' WHERE TmemberID = '"+Memberid+"'";
        
              stmt.executeUpdate(query1);
            
           
            
         
           
           JOptionPane.showMessageDialog(this,"Updated Teacher Member Details Successfully");
           
            reseting();
            disabling();
                
        } 
            }
        else
            {
               JOptionPane.showMessageDialog(this, "Please enter a correct ID ","",JOptionPane.OK_OPTION); 
            }
        
    
        }
        }
     catch (NumberFormatException n) 
                {
                JOptionPane.showMessageDialog(this, " Error Enter Numbers to relavant fields!","",JOptionPane.ERROR_MESSAGE);
                }
                catch (Exception e) {
              
               JOptionPane.showMessageDialog(this, ""+e.getMessage()+" Error,  Details Not Updated!","",JOptionPane.OK_OPTION);
                        
                }
        
    }//GEN-LAST:event_updateActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
      
        
        String Memberid=Member_ID.getText();
         int count=0;  
            
           
            if(Memberid.charAt(0)=='S')
            {
                try
                {
                     int b = JOptionPane.showConfirmDialog(null, "Do you want to Delete ?", "Confirm", JOptionPane.YES_NO_OPTION);
                     if (b == 0) {
                         Connection con = DB.myCon();
                         Statement s = con.createStatement();
                         
                            ResultSet res = s.executeQuery("SELECT NoOfBooks FROM student WHERE SmemberID='"+Memberid+"'");
                            if (res.next()) 
                            {
                                count= Integer.parseInt(res.getString("NoOfBooks"));
                            }
                         
                                if(count==0)
                                {


                                        String q1  = ("DELETE FROM member WHERE Member_ID = '"+Memberid+"'");
                                     
                                        s.executeUpdate(q1);
                                     

                                    JOptionPane.showMessageDialog(null, " Member successfully Deleted");

                                        reseting();
                                        disabling();
                                        Member_ID.setText("");
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(this, "Cannot be deleted, Student hasnt returned the books ", "",JOptionPane.WARNING_MESSAGE);
                                }
                    }
                }
                catch (Exception e)
                {
              
               JOptionPane.showMessageDialog(this, ""+e.getMessage()+" Error,  Member Not Deleted!","",JOptionPane.ERROR_MESSAGE);
                        
                }
        }
            if(Memberid.charAt(0)=='T')
            {
                try
                {
                     int b = JOptionPane.showConfirmDialog(null, "Do you want to Delete ?", "Confirm", JOptionPane.YES_NO_OPTION);
                        if (b == 0) {
                         Connection con = DB.myCon();
                         Statement s = con.createStatement();
                         
                            ResultSet res = s.executeQuery("SELECT NoOfBooks FROM teacher WHERE TmemberID='"+Memberid+"'");
                            while (res.next()) 
                            {
                                count= Integer.parseInt(res.getString("NoOfBooks"));
                            }
                         
                                if(count==0)
                                {

                                        String q1  = ("DELETE FROM member WHERE Member_ID = '"+Memberid+"'");
                                        //String q2  = ("DELETE FROM teacher WHERE TmemberID = '"+Memberid+"'");
                                        s.executeUpdate(q1);
                                        //s.executeUpdate(q2);

                                    JOptionPane.showMessageDialog(null, " Teacher member successfully Deleted");

                                        reseting();
                                        disabling();
                                        Member_ID.setText("");
                                }
                                else
                                {
                                    JOptionPane.showMessageDialog(this, "Cannot be deleted, Teacher hasn't returned the books ", "",JOptionPane.WARNING_MESSAGE);
                                }
                }
                }
                catch (Exception e)
                {
              
               JOptionPane.showMessageDialog(this, ""+e.getMessage()+" Error,  Member Not Deleted!","",JOptionPane.ERROR_MESSAGE);
                        
                }
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
      new Home_GUI().setVisible(true);
      this.dispose();
    }//GEN-LAST:event_backActionPerformed

    private void addmemberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addmemberActionPerformed
       new Add_Member_GUI().setVisible(true);
       this.dispose();
    }//GEN-LAST:event_addmemberActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new Member_ViewAll_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        new Home_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new Manage_Members_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new Manage_Books_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        new Manage_Book_Lending().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        new Manage_Inventory_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        new Manage_Newspaper_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        new Manage_User_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

   
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Manage_Members_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Manage_Members_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Manage_Members_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Manage_Members_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Manage_Members_GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DOB;
    private com.toedter.calendar.JDateChooser DOR;
    private javax.swing.JTextField Member_ID;
    private javax.swing.JButton addmember;
    private javax.swing.JTextField address;
    private javax.swing.JButton back;
    private javax.swing.JTextField contactno;
    private javax.swing.JButton delete;
    private javax.swing.JButton edit;
    private javax.swing.JTextField email;
    private javax.swing.JTextField fname;
    private javax.swing.JComboBox gender;
    private javax.swing.JTextField grade;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JTextField lname;
    private javax.swing.JTextField no_of_books;
    private javax.swing.JButton reset;
    private javax.swing.JButton search;
    private javax.swing.JTextField subject;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables
private void disabling() {
        fname.setEnabled(false);
        lname.setEnabled(false);
        
        address.setEnabled(false);
         gender.setEnabled(false);
         contactno.setEnabled(false);
         email.setEnabled(false);
         no_of_books.setEnabled(false);
         grade.setEnabled(false);
         subject.setEnabled(false);
        
         DOR.setEnabled(false);
         DOB.setEnabled(false);
         update.setEnabled(false);
         delete.setEnabled(false);
  
    }
private void reseting() {
    Member_ID.setText("");
        fname.setText("");
        lname.setText("");
        
        address.setText("");
         gender.setSelectedItem("Select");
         contactno.setText("");
         email.setText("");
         no_of_books.setText("");
         grade.setText("");
         subject.setText("");
        
         DOR.setCalendar(null);
         DOB.setCalendar(null);
         
  
    }
private void enablings() {
        fname.setEnabled(true);
        lname.setEnabled(true);
        
        address.setEnabled(true);
         gender.setEnabled(true);
         contactno.setEnabled(true);
         email.setEnabled(true);
         no_of_books.setEnabled(true);
         grade.setEnabled(true);
         
        
         DOR.setEnabled(true);
         DOB.setEnabled(true);
         
  
    }
private void enablingt() {
        fname.setEnabled(true);
        lname.setEnabled(true);
        
        address.setEnabled(true);
         gender.setEnabled(true);
         contactno.setEnabled(true);
         email.setEnabled(true);
         no_of_books.setEnabled(true);
         
         subject.setEnabled(true);
        
         DOR.setEnabled(true);
         DOB.setEnabled(true);
         
  
    }

}
