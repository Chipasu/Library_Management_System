package GUI;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Extreme
 */
import DB.DB;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

public class Member_Search_And_View extends javax.swing.JFrame {

    /**
     * Creates new form Member_Search_And_View
     */
    String reportType,ke;
    public Member_Search_And_View() {
        initComponents();
        reportType="";
        gen.setEnabled(false);
        gen1.setEnabled(false);
        ke="";
        setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        criteria = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewtable = new javax.swing.JTable();
        gen = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLayeredPane6 = new javax.swing.JLayeredPane();
        jButton2 = new javax.swing.JButton();
        all = new javax.swing.JRadioButton();
        notborrowed = new javax.swing.JRadioButton();
        borrowed = new javax.swing.JRadioButton();
        notborrowed2 = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        jLayeredPane7 = new javax.swing.JLayeredPane();
        jLabel6 = new javax.swing.JLabel();
        key1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        criteria1 = new javax.swing.JComboBox();
        jButton5 = new javax.swing.JButton();
        jLayeredPane8 = new javax.swing.JLayeredPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        viewtable1 = new javax.swing.JTable();
        gen1 = new javax.swing.JButton();
        resett = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLayeredPane9 = new javax.swing.JLayeredPane();
        jButton13 = new javax.swing.JButton();
        all1 = new javax.swing.JRadioButton();
        notborrowed1 = new javax.swing.JRadioButton();
        borrowed1 = new javax.swing.JRadioButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Member Search And View");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/title ori.jpg"))); // NOI18N

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Library Management System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Member Search And View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Search Keyword");
        jLabel2.setBounds(10, 40, 100, 40);
        jLayeredPane2.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        key.setBounds(100, 50, 140, 20);
        jLayeredPane2.add(key, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Search Criteria");
        jLabel3.setBounds(250, 50, 90, 20);
        jLayeredPane2.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        criteria.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        criteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Search By Name", "Search By ID", "Search By Grade", " " }));
        criteria.setBounds(340, 50, 130, 20);
        jLayeredPane2.add(criteria, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Search-Search-icon1`.png"))); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(340, 80, 130, 25);
        jLayeredPane2.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "View", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        viewtable.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        viewtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member Id", "Fast Nam", "Last Name", "Address", "DOB", " Date of registered", "Gender", "Email", "Contact No", "No of  books", "Grade", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, true, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewtable.setToolTipText("");
        viewtable.setEnabled(false);
        jScrollPane1.setViewportView(viewtable);

        jScrollPane1.setBounds(10, 30, 720, 250);
        jLayeredPane3.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(10, 110, 740, 290);
        jLayeredPane2.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/print_icon.png"))); // NOI18N
        gen.setText("Genarate Report");
        gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genActionPerformed(evt);
            }
        });
        gen.setBounds(40, 410, 160, 30);
        jLayeredPane2.add(gen, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/reset.gif"))); // NOI18N
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.setBounds(460, 410, 100, 30);
        jLayeredPane2.add(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/back1.png"))); // NOI18N
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(600, 410, 100, 30);
        jLayeredPane2.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane6.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/view.png"))); // NOI18N
        jButton2.setText("View All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setBounds(50, 20, 140, 25);
        jLayeredPane6.add(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(all);
        all.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        all.setText("All");
        all.setBounds(190, 60, 50, 21);
        jLayeredPane6.add(all, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(notborrowed);
        notborrowed.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        notborrowed.setText("Not Borrowed ");
        notborrowed.setBounds(90, 60, 110, 23);
        jLayeredPane6.add(notborrowed, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(borrowed);
        borrowed.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        borrowed.setText("Borrowed ");
        borrowed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowedActionPerformed(evt);
            }
        });
        borrowed.setBounds(0, 60, 120, 23);
        jLayeredPane6.add(borrowed, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(notborrowed2);
        notborrowed2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        notborrowed2.setText("Not Borrowed ");
        notborrowed2.setBounds(90, 60, 110, 23);
        jLayeredPane6.add(notborrowed2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane6.setBounds(480, 20, 250, 90);
        jLayeredPane2.add(jLayeredPane6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Student", jPanel1);

        jLayeredPane7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Member Search And View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel6.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel6.setText("Search Keyword");
        jLabel6.setBounds(10, 40, 100, 40);
        jLayeredPane7.add(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        key1.setBounds(100, 50, 140, 20);
        jLayeredPane7.add(key1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel7.setText("Search Criteria");
        jLabel7.setBounds(250, 50, 90, 20);
        jLayeredPane7.add(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);

        criteria1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        criteria1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Search By Name", "Search By ID", "Search By Subject", " " }));
        criteria1.setBounds(340, 50, 130, 20);
        jLayeredPane7.add(criteria1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Search-Search-icon1`.png"))); // NOI18N
        jButton5.setText("Search");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jButton5.setBounds(340, 80, 130, 25);
        jLayeredPane7.add(jButton5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane8.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "View", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        viewtable1.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        viewtable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member Id", "Fast Nam", "Last Name", "Address", "DOB", " Date of registered", "Gender", "Email", "Contact No", "No of  books", "Grade", "Subject"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, true, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewtable1.setToolTipText("");
        viewtable1.setEnabled(false);
        jScrollPane3.setViewportView(viewtable1);

        jScrollPane3.setBounds(10, 30, 720, 250);
        jLayeredPane8.add(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane8.setBounds(10, 110, 740, 290);
        jLayeredPane7.add(jLayeredPane8, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gen1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/print_icon.png"))); // NOI18N
        gen1.setText("Genarate Report");
        gen1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gen1ActionPerformed(evt);
            }
        });
        gen1.setBounds(40, 410, 160, 30);
        jLayeredPane7.add(gen1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        resett.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/reset.gif"))); // NOI18N
        resett.setText("Reset");
        resett.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resettActionPerformed(evt);
            }
        });
        resett.setBounds(460, 410, 100, 30);
        jLayeredPane7.add(resett, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/back1.png"))); // NOI18N
        jButton12.setText("Back");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jButton12.setBounds(600, 410, 100, 30);
        jLayeredPane7.add(jButton12, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/view.png"))); // NOI18N
        jButton13.setText("View All");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jButton13.setBounds(50, 20, 140, 25);
        jLayeredPane9.add(jButton13, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup2.add(all1);
        all1.setFont(new java.awt.Font("Times New Roman", 1, 11)); // NOI18N
        all1.setText("All");
        all1.setBounds(190, 60, 50, 21);
        jLayeredPane9.add(all1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup2.add(notborrowed1);
        notborrowed1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        notborrowed1.setText("Not Borrowed ");
        notborrowed1.setBounds(90, 60, 110, 23);
        jLayeredPane9.add(notborrowed1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup2.add(borrowed1);
        borrowed1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        borrowed1.setText("Borrowed ");
        borrowed1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowed1ActionPerformed(evt);
            }
        });
        borrowed1.setBounds(0, 60, 120, 23);
        jLayeredPane9.add(borrowed1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane9.setBounds(480, 20, 250, 90);
        jLayeredPane7.add(jLayeredPane9, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLayeredPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 461, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Teacher", jPanel2);

        jTabbedPane1.setBounds(10, 30, 780, 511);
        jLayeredPane1.add(jTabbedPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jTabbedPane1.getAccessibleContext().setAccessibleName("Student");

        jMenu2.setText("Navigate");

        jMenuItem8.setText("Home");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem2.setText("Manage Members");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Manage Books");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Manage Book Lending");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Manage Inventory");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Manage Newspaper Reocords");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Manage User Accounts");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLayeredPane1))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 541, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-816)/2, (screenSize.height-682)/2, 816, 682);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new Search_and_View_Main_GUI().setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genActionPerformed
               new Thread(new Runnable() {

            @Override
            public void run() {
            
    try 
    {
     
      JasperReport jr = null;
      Connection con = DB.myCon();
      //Map<Object, String> pp = new HashMap<Object, String>();
      HashMap pp = new HashMap();
      
     if(reportType.equals("allS"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\AllStudents.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JasperViewer.viewReport(jp, false);
     }
     else if(reportType.equals("borrowedS"))
     {
        
        
        jr = JasperCompileManager.compileReport("src\\Report\\BorrowedStudents.jrxml");
        
        JasperPrint jp = JasperFillManager.fillReport(jr, null,con);
            JasperViewer.viewReport(jp, false);
     }
       else if(reportType.equals("notborrowedS"))
     {
        
        
        jr = JasperCompileManager.compileReport("src\\Report\\NotBorrowedStudents.jrxml");
        
        JasperPrint jp = JasperFillManager.fillReport(jr, null,con);
            JasperViewer.viewReport(jp, false);
     }
     else if(reportType.equals("Grade"))
     {
         
        int grade1=Integer.parseInt(ke);
    
        jr = JasperCompileManager.compileReport("src\\Report\\GradeStudents.jrxml");
        pp.put("grade", grade1);
        
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     }
            
          

            
            
            
            
        } catch (Exception e) 
        {
             
            e.printStackTrace();
            

        }

                   
            }
        }).start();

    }//GEN-LAST:event_genActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        new Home_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new Manage_Members_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new Manage_Books_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        new Manage_Book_Lending().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        new Manage_Inventory_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        new Manage_Newspaper_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        new Manage_User_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void borrowedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowedActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       try {
              
           
            Connection con = DB.myCon();
            Statement S = con.createStatement();
            DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
            tb.setRowCount(0);
            String cri=(String) criteria.getSelectedItem();
            
            if(cri.equals("Select")||key.getText().equals(""))
            {
                 JOptionPane.showMessageDialog(this, "Please Select a criteria And enter a Key word!","",JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                if(cri.equals("Search By ID"))
                {
                    gen.setEnabled(false);
                    
                    if(!(key.getText().charAt(0)=='S'))
                    {
                        JOptionPane.showMessageDialog(this, "Please Enter the ID Correctly!","",JOptionPane.WARNING_MESSAGE);
                    }
                    else
                    {
                       String ke=key.getText();
                       ResultSet rs = S.executeQuery("SELECT * FROM student where SmemberID='"+ke+"'"); 
                          
                       if(rs.next())
                       {
                    
                    
                         

                    
                        Vector v = new Vector();
                          
                        v.add(rs.getString("SmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                         v.add(rs.getString("NoOfBooks"));
                          v.add(rs.getString("Grade"));
                          
                          
                          
                        tb.addRow(v);
                    
                       }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such ID!","",JOptionPane.ERROR_MESSAGE);  
                          }
                    }
                    
                }
                
                if(cri.equals("Search By Name"))
                {
                    gen.setEnabled(false);
                     ke=key.getText();
                     ResultSet rs1 = S.executeQuery("SELECT * FROM student where Fname='"+ke+"'"); 
                            
                       if(rs1.next())
                       {

                     ResultSet rs = S.executeQuery("SELECT * FROM student where Fname='"+ke+"'"); 
                     
                     while(rs.next())
                     {
                        Vector v = new Vector();
                      
                        v.add(rs.getString("SmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                         v.add(rs.getString("NoOfBooks"));
                          v.add(rs.getString("Grade"));
       
                        tb.addRow(v);
                     }
                       }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Name!","",JOptionPane.ERROR_MESSAGE);  
                          }
                
                }
            if(cri.equals("Search By Grade"))
                {
                    gen.setEnabled(true);
                    reportType="Grade";
                    ke=key.getText();
                    int k=Integer.parseInt(key.getText());
                    ResultSet rs1 = S.executeQuery("SELECT * FROM student where Grade="+ke+"");
                    
                        if(rs1.next())  
                          {
                              
                          ResultSet rs = S.executeQuery("SELECT * FROM student where Grade="+ke+"");
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                 v.add(rs.getString("SmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                         v.add(rs.getString("NoOfBooks"));
                          v.add(rs.getString("Grade"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Grade!","",JOptionPane.ERROR_MESSAGE);  
                          }
                }
            
               
                
            
           
        }
        }
        catch (NumberFormatException e1) 
                {
                    JOptionPane.showMessageDialog(this, "Please enter a Number as a grade!","",JOptionPane.WARNING_MESSAGE);
                }
                catch (Exception e) 
                {
                    JOptionPane.showMessageDialog(this, "DataBase Error!","",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
         try {
             key.setText("");
            criteria.setSelectedItem("Select");
                     Connection con = DB.myCon();
            Statement S = con.createStatement();
             DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
            tb.setRowCount(0);
            
            
            if(borrowed.isSelected())
            {
                    gen.setEnabled(true);
                    reportType="borrowedS"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM student where NoOfBooks>0");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM student where NoOfBooks>0");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();
                            v.add(rs.getString("SmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                         v.add(rs.getString("NoOfBooks"));
                          v.add(rs.getString("Grade"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Students !","",JOptionPane.WARNING_MESSAGE);  
                          }
                    
            }
            else if(notborrowed.isSelected())
            {
                 gen.setEnabled(true);
                    reportType="notborrowedS"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM student where NoOfBooks=0");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM student where NoOfBooks=0");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                     v.add(rs.getString("SmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                         v.add(rs.getString("NoOfBooks"));
                          v.add(rs.getString("Grade"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Students!","",JOptionPane.WARNING_MESSAGE);  
                          }
            }
             else if(all.isSelected())
            {
                 gen.setEnabled(true);
                    reportType="allS"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM student");
                    
                        if(rs1.next())  
                          {
                               ResultSet rs = S.executeQuery("SELECT * FROM student");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                     v.add(rs.getString("SmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                         v.add(rs.getString("NoOfBooks"));
                          v.add(rs.getString("Grade"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Students!","",JOptionPane.WARNING_MESSAGE);  
                          }
            }
                         
            
            else
             {
                 JOptionPane.showMessageDialog(this, "Please Select an option!","",JOptionPane.WARNING_MESSAGE);
             }
          
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(this, "Error!","",JOptionPane.ERROR_MESSAGE);
         }
               
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
  try {
              
           
            Connection con = DB.myCon();
            Statement S = con.createStatement();
            DefaultTableModel tb = (DefaultTableModel) viewtable1.getModel();
            tb.setRowCount(0);
            String cri=(String) criteria1.getSelectedItem();
            
            if(cri.equals("Select")||key1.getText().equals(""))
            {
                 JOptionPane.showMessageDialog(this, "Please Select a criteria And enter a Key word!","",JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                if(cri.equals("Search By ID"))
                {
                    gen1.setEnabled(false);
                    
                    if(!(key1.getText().charAt(0)=='T'))
                    {
                        JOptionPane.showMessageDialog(this, "Please Enter the ID Correctly!","",JOptionPane.WARNING_MESSAGE);
                    }
                    else
                    {
                       String id=key1.getText();
                       ResultSet rs = S.executeQuery("SELECT * FROM teacher where TmemberID='"+id+"'"); 
                          
                       if(rs.next())
                       {
                    
                    
                         

                    
                        Vector v = new Vector();
                          
                          v.add(rs.getString("TmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                          v.add(rs.getString("NoOfBooks"));
                          v.add("");
                          v.add(rs.getString("Subject"));
                          
                        tb.addRow(v);
                    
                       }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such ID!","",JOptionPane.ERROR_MESSAGE);  
                          }
                    }
                    
                }
                
                if(cri.equals("Search By Name"))
                {
                    gen1.setEnabled(false);
                    ke=key1.getText();
                     ResultSet rs1 = S.executeQuery("SELECT * FROM teacher where Fname='"+ke+"'"); 
                            
                       if(rs1.next())
                       {

                     ResultSet rs = S.executeQuery("SELECT * FROM teacher where Fname='"+ke+"'");
                      
                     while(rs.next())
                     {
                             Vector v = new Vector();
                      
                               v.add(rs.getString("TmemberID"));
                        v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                          v.add(rs.getString("NoOfBooks"));
                          v.add("");
                          v.add(rs.getString("Subject"));
                          
                        tb.addRow(v);
                     }
                       }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Name!","",JOptionPane.ERROR_MESSAGE);  
                          }
                
                }
            if(cri.equals("Search By Subject"))
                {
                    gen1.setEnabled(true);
                    reportType="Subject";
                     ke=key1.getText();
                    ResultSet rs1 = S.executeQuery("SELECT * FROM teacher where Subject='"+ke+"'");
                    
                        if(rs1.next())  
                          {
                               ResultSet rs = S.executeQuery("SELECT * FROM teacher where Subject='"+ke+"'");
                          
                                while (rs.next()) 
                                {
                            
                            Vector v = new Vector();
                      
                               v.add(rs.getString("TmemberID"));
                            v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                          v.add(rs.getString("NoOfBooks"));
                          v.add("");
                          v.add(rs.getString("Subject"));
                          
                        tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Subject!","",JOptionPane.ERROR_MESSAGE);  
                          }
                }
            
               
                
            
           
        }
        }
                catch (Exception e) 
                {
                    JOptionPane.showMessageDialog(this, "DataBase Error!"+e.getMessage(),"",JOptionPane.WARNING_MESSAGE);
                }         
        
        
        
        
        
        
        
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void gen1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gen1ActionPerformed
        new Thread(new Runnable() {

            @Override
            public void run() {
            
    try 
    {
     
      JasperReport jr = null;
      Connection con = DB.myCon();
      //Map<Object, String> pp = new HashMap<Object, String>();
      HashMap pp = new HashMap();
      
     if(reportType.equals("allT"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\AllTeachers.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JasperViewer.viewReport(jp, false);
     }
     else if(reportType.equals("borrowedT"))
     {
        
        
        jr = JasperCompileManager.compileReport("src\\Report\\BorrowedTeachers.jrxml");
        
        JasperPrint jp = JasperFillManager.fillReport(jr, null,con);
            JasperViewer.viewReport(jp, false);
     }
       else if(reportType.equals("notborrowedT"))
     {
        
        
        jr = JasperCompileManager.compileReport("src\\Report\\NotBorrowedTeachers.jrxml");
        
        JasperPrint jp = JasperFillManager.fillReport(jr, null,con);
            JasperViewer.viewReport(jp, false);
     }
     else if(reportType.equals("Subject"))
     {
         
        
    
        jr = JasperCompileManager.compileReport("src\\Report\\SubjectTeachers.jrxml");
        pp.put("subject", ke);
        
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     }
            
          

            
            
            
            
        } catch (Exception e) 
        {
             
            e.printStackTrace();
            

        }

                   
            }
        }).start();
    }//GEN-LAST:event_gen1ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
         new Search_and_View_Main_GUI().setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        try {
            
            key1.setText("");
            criteria1.setSelectedItem("Select");
                     Connection con = DB.myCon();
            Statement S = con.createStatement();
             DefaultTableModel tb = (DefaultTableModel) viewtable1.getModel();
            tb.setRowCount(0);
            
            
            if(borrowed1.isSelected())
            {
                    gen1.setEnabled(true);
                    reportType="borrowedT"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM teacher where NoOfBooks>0");
                    
                        if(rs1.next())  
                          {
                               ResultSet rs = S.executeQuery("SELECT * FROM teacher where NoOfBooks>0");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();
                      
                               v.add(rs.getString("TmemberID"));
                            v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                          v.add(rs.getString("NoOfBooks"));
                          v.add("");
                          v.add(rs.getString("Subject"));
                          
                        tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  teachers !","",JOptionPane.WARNING_MESSAGE);  
                          }
                    
            }
            else if(notborrowed1.isSelected())
            {
                 gen1.setEnabled(true);
                    reportType="notborrowedT"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM teacher where NoOfBooks=0");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM teacher where NoOfBooks=0");
                          
                                while (rs.next()) 
                                {
                                   Vector v = new Vector();
                      
                               v.add(rs.getString("TmemberID"));
                            v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                          v.add(rs.getString("NoOfBooks"));
                          v.add("");
                          v.add(rs.getString("Subject"));
                          
                        tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Teachers!","",JOptionPane.WARNING_MESSAGE);  
                          }
            }
             else if(all1.isSelected())
            {
                 gen1.setEnabled(true);
                    reportType="allT"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM teacher");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM teacher");
                          
                                while (rs.next()) 
                                {
                                   Vector v = new Vector();
                      
                               v.add(rs.getString("TmemberID"));
                            v.add(rs.getString("Fname"));
                         v.add(rs.getString("Lname"));
                          v.add(rs.getString("Address"));
                         v.add(rs.getDate("DateOfBirth"));
                         v.add(rs.getDate("DateOfRegistration"));
                          v.add(rs.getString("Gender"));
                          v.add(rs.getString("Email"));
                          v.add(rs.getString("ContactNumber"));
                          v.add(rs.getString("NoOfBooks"));
                          v.add("");
                          v.add(rs.getString("Subject"));
                          
                        tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Teachers!","",JOptionPane.WARNING_MESSAGE);  
                          }
            }
             
                         
            
            else
             {
                 JOptionPane.showMessageDialog(this, "Please Select an option!","",JOptionPane.WARNING_MESSAGE);
             }
          
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(this, "Error!","",JOptionPane.ERROR_MESSAGE);
         }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void borrowed1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowed1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowed1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
            tb.setRowCount(0);
            key.setText("");
           
        criteria.setSelectedItem("Select");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void resettActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resettActionPerformed
       DefaultTableModel tb = (DefaultTableModel) viewtable1.getModel();
            tb.setRowCount(0);
            key1.setText("");
            criteria1.setSelectedItem("Select");
            gen.setEnabled(false);
            gen1.setEnabled(false);
    }//GEN-LAST:event_resettActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Member_Search_And_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Member_Search_And_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Member_Search_And_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Member_Search_And_View.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Member_Search_And_View().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton all;
    private javax.swing.JRadioButton all1;
    private javax.swing.JRadioButton borrowed;
    private javax.swing.JRadioButton borrowed1;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JComboBox criteria;
    private javax.swing.JComboBox criteria1;
    private javax.swing.JButton gen;
    private javax.swing.JButton gen1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane6;
    private javax.swing.JLayeredPane jLayeredPane7;
    private javax.swing.JLayeredPane jLayeredPane8;
    private javax.swing.JLayeredPane jLayeredPane9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField key;
    private javax.swing.JTextField key1;
    private javax.swing.JRadioButton notborrowed;
    private javax.swing.JRadioButton notborrowed1;
    private javax.swing.JRadioButton notborrowed2;
    private javax.swing.JButton resett;
    private javax.swing.JTable viewtable;
    private javax.swing.JTable viewtable1;
    // End of variables declaration//GEN-END:variables
}
