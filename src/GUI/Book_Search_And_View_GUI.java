package GUI;

import DB.DB;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.HashMap;
import java.util.Map;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Extreme
 */
public class Book_Search_And_View_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Book_Search_And_View_GUI
     */
    String reprottype;
    public Book_Search_And_View_GUI() {
        initComponents();
        setResizable(false);
        gen.setEnabled(false);
        reprottype="";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        key = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        criteria = new javax.swing.JComboBox();
        search = new javax.swing.JButton();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewtable = new javax.swing.JTable();
        available = new javax.swing.JRadioButton();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        viewall = new javax.swing.JButton();
        all = new javax.swing.JRadioButton();
        borrowed = new javax.swing.JRadioButton();
        gen = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Book Search And View");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/title ori.jpg"))); // NOI18N

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Library Management System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Book Search And View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("Search Keyword");
        jLabel2.setBounds(10, 30, 100, 20);
        jLayeredPane2.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        key.setBounds(100, 30, 140, 20);
        jLayeredPane2.add(key, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Search Criteria");
        jLabel3.setBounds(250, 30, 90, 14);
        jLayeredPane2.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        criteria.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        criteria.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Search By Name", "Search By ID", "Search By Author", "Search By Category", "Search By Type" }));
        criteria.setBounds(340, 20, 130, 30);
        jLayeredPane2.add(criteria, javax.swing.JLayeredPane.DEFAULT_LAYER);

        search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Search-Search-icon1`.png"))); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        search.setBounds(340, 60, 130, 25);
        jLayeredPane2.add(search, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "View", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        viewtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "Name", "Author", "ISBN", "Category", "Addded Date", "No Of Pages", "Book Type", "Price", "Shelf No", "Statues"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(viewtable);

        jScrollPane1.setBounds(10, 20, 740, 310);
        jLayeredPane3.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(10, 90, 760, 340);
        jLayeredPane2.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(available);
        available.setText("Available");
        available.setBounds(580, 60, 90, 23);
        jLayeredPane2.add(available, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        viewall.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/view.png"))); // NOI18N
        viewall.setText("View All");
        viewall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewallActionPerformed(evt);
            }
        });
        viewall.setBounds(80, 10, 90, 25);
        jLayeredPane4.add(viewall, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(all);
        all.setText("All");
        all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                allActionPerformed(evt);
            }
        });
        all.setBounds(180, 40, 50, 23);
        jLayeredPane4.add(all, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(borrowed);
        borrowed.setText("Borrowed");
        borrowed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                borrowedActionPerformed(evt);
            }
        });
        borrowed.setBounds(10, 40, 71, 23);
        jLayeredPane4.add(borrowed, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane4.setBounds(490, 20, 250, 70);
        jLayeredPane2.add(jLayeredPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBounds(10, 50, 780, 450);
        jLayeredPane1.add(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/print_icon.png"))); // NOI18N
        gen.setText("Genarate Report");
        gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genActionPerformed(evt);
            }
        });
        gen.setBounds(80, 510, 150, 30);
        jLayeredPane1.add(gen, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/reset.gif"))); // NOI18N
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.setBounds(500, 510, 90, 30);
        jLayeredPane1.add(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/back1.png"))); // NOI18N
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(640, 510, 80, 30);
        jLayeredPane1.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jMenu2.setText("Navigate");

        jMenuItem8.setText("Home");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem2.setText("Manage Members");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Manage Books");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Manage Book Lending");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Manage Inventory");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Manage Newspaper Reocords");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Manage User Accounts");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 803, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-819)/2, (screenSize.height-678)/2, 819, 678);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
       new Search_and_View_Main_GUI().setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        new Home_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new Manage_Members_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new Manage_Books_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        new Manage_Book_Lending().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        new Manage_Inventory_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        new Manage_Newspaper_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        new Manage_User_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_allActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_allActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        try {
                   
            Connection con = DB.myCon();
            Statement S = con.createStatement();
            DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
            tb.setRowCount(0);
            String cri=(String) criteria.getSelectedItem();
            
            if(cri.equals("Select")||key.getText().equals(""))
            {
                 JOptionPane.showMessageDialog(this, "Please Select a criteria And enter a Key word!","",JOptionPane.WARNING_MESSAGE);
            }
            else
            {
                if(cri.equals("Search By ID"))
                {
                    gen.setEnabled(false);
                    
                    if(!(key.getText().charAt(0)=='B'))
                    {
                        JOptionPane.showMessageDialog(this, "Please Enter the ID Correctly!","",JOptionPane.WARNING_MESSAGE);
                    }
                    else
                    {
                       
                          ResultSet rs = S.executeQuery("SELECT * FROM book1 where bookid='"+key.getText()+"'"); 
                          if(rs.next())  
                          {
                              
                          
                               
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                                
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such ID!","",JOptionPane.ERROR_MESSAGE);  
                          }
                    }
                    
                }
                
                if(cri.equals("Search By Name"))
                {
                    gen.setEnabled(false);
                    ResultSet rs1 = S.executeQuery("SELECT * FROM book1 where name='"+key.getText()+"'");
                    
                        if(rs1.next())  
                          {
                              
                           ResultSet rs = S.executeQuery("SELECT * FROM book1 where name='"+key.getText()+"'");
                                
                           while(rs.next())
                           {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                           } 
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Name!","",JOptionPane.ERROR_MESSAGE);  
                          }
                
                }
            if(cri.equals("Search By Author"))
                {
                    gen.setEnabled(true);
                    reprottype="Author";
                    ResultSet rs1 = S.executeQuery("SELECT * FROM book1 where Author='"+key.getText()+"'");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM book1 where Author='"+key.getText()+"'");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Books by Author!","",JOptionPane.ERROR_MESSAGE);  
                          }
                }
            
                if(cri.equals("Search By Category"))
                {
                    gen.setEnabled(true);
                    reprottype="Category";
                    ResultSet rs1 = S.executeQuery("SELECT * FROM book1 where category='"+key.getText()+"'");
                    
                        if(rs1.next())  
                          {
                              
                          ResultSet rs = S.executeQuery("SELECT * FROM book1 where category='"+key.getText()+"'");
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Books by Category!","",JOptionPane.ERROR_MESSAGE);  
                          }
                }
                
                 if(cri.equals("Search By Type"))
                {
                    gen.setEnabled(true);
                    reprottype="type";
                    ResultSet rs1 = S.executeQuery("SELECT * FROM book1 where booktype='"+key.getText()+"'");
                    
                        if(rs1.next())  
                          {
                              
                           ResultSet rs = S.executeQuery("SELECT * FROM book1 where booktype='"+key.getText()+"'");
                                
                           while(rs.next())
                           {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                           } 
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Such Type!","",JOptionPane.ERROR_MESSAGE);  
                          }
                
                }
            
           
        }
        }
                catch (Exception e) 
                {
                    JOptionPane.showMessageDialog(this, "DataBase Error!","",JOptionPane.ERROR_MESSAGE);
                }
    }//GEN-LAST:event_searchActionPerformed

    private void viewallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewallActionPerformed
        
         try {
                     Connection con = DB.myCon();
            Statement S = con.createStatement();
             DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
            tb.setRowCount(0);
            key.setText("");
        criteria.setSelectedItem("Select");
            
            if(borrowed.isSelected())
            {
                    gen.setEnabled(true);
                    reprottype="borrowed"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM book1 where statues='Borrowed'");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM book1 where statues='Borrowed'");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Borrowed Books!","",JOptionPane.ERROR_MESSAGE);  
                          }
                    
            }
            else if(available.isSelected())
            {
                 gen.setEnabled(true);
                    reprottype="available"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM book1 where statues='Available'");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM book1 where statues='Available'");
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No  Available Books!","",JOptionPane.ERROR_MESSAGE);  
                          }
            }
             else if(all.isSelected())
            {
                gen.setEnabled(true);
                reprottype="all"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM book1");
                    
                        if(rs1.next())  
                          {
                              ResultSet rs = S.executeQuery("SELECT * FROM book1"); 
                          
                                while (rs.next()) 
                                {
                                    Vector v = new Vector();

                                    v.add(rs.getString("bookid"));
                                    v.add(rs.getString("name"));
                                    v.add(rs.getString("author"));
                                    v.add(rs.getString("isbn"));
                                    v.add(rs.getString("category"));
                                    v.add(rs.getDate("addeddate"));
                                    v.add(rs.getString("price"));
                                    v.add(rs.getString("booktype"));
                                    v.add(rs.getString("noofpages"));
                                    v.add(rs.getString("shelfno"));
                                    v.add(rs.getString("statues"));

                                    tb.addRow(v);
                                }
                          }
                          else
                          {
                            JOptionPane.showMessageDialog(this, "No Books!","",JOptionPane.ERROR_MESSAGE);  
                          }
            }
            else
             {
                 JOptionPane.showMessageDialog(this, "Please Select an option!","",JOptionPane.WARNING_MESSAGE);
             }
          
         }
         catch(Exception e)
         {
             JOptionPane.showMessageDialog(this, "Error!","",JOptionPane.ERROR_MESSAGE);
         }
               
        
    }//GEN-LAST:event_viewallActionPerformed

    private void genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genActionPerformed
       
           
            new Thread(new Runnable() {

            @Override
            public void run() {
            
    try 
    {
     
      JasperReport jr = null;
      Connection con = DB.myCon();
      //Map<Object, String> pp = new HashMap<Object, String>();
      HashMap pp = new HashMap();
      
     if(reprottype.equals("all"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\report1Allbooks.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JasperViewer.viewReport(jp, false);
     }
     else if(reprottype.equals("Category"))
     {
         String cat=key.getText();
        jr = JasperCompileManager.compileReport("src\\Report\\CategoryBooks.jrxml");
        pp.put("cate", cat);
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     }
            
      else if(reprottype.equals("Author"))
     {
         String aut=key.getText();
        jr = JasperCompileManager.compileReport("src\\Report\\AuthorBooks.jrxml");
        pp.put("author", aut);
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     } 
     else if(reprottype.equals("borrowed"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\BorrowedBooks.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JasperViewer.viewReport(jp, false);
     }
     else  if(reprottype.equals("available"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\AvailableBooks.jrxml");
            JasperPrint jp = JasperFillManager.fillReport(jr, null, con);
            JasperViewer.viewReport(jp, false);
     }
      else if(reprottype.equals("type"))
     {
         String ty=key.getText();
        jr = JasperCompileManager.compileReport("src\\Report\\TypeBooks.jrxml");
        pp.put("type", ty);
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     } 
            
            
            
            
        } catch (Exception e) {
            e.printStackTrace();

        }

                   
            }
        }).start();

           
           
       
        
        
        
    }//GEN-LAST:event_genActionPerformed

    private void borrowedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_borrowedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_borrowedActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        key.setText("");
        criteria.setSelectedItem("Select");
        DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
            tb.setRowCount(0);
            gen.setEnabled(false);
            reprottype="";
            
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Book_Search_And_View_GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton all;
    private javax.swing.JRadioButton available;
    private javax.swing.JRadioButton borrowed;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox criteria;
    private javax.swing.JButton gen;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField key;
    private javax.swing.JButton search;
    private javax.swing.JButton viewall;
    private javax.swing.JTable viewtable;
    // End of variables declaration//GEN-END:variables
}
