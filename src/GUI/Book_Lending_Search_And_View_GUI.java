/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import DB.DB;
import Main.SendMailUsingAuthentication;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Vector;
import javax.mail.MessagingException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Extreme
 */
public class Book_Lending_Search_And_View_GUI extends javax.swing.JFrame {

    /**
     * Creates new form Book_Lending_Search_And_View_GUI
     */String rep;
     String DOF1;
     String DOT1;
     int ecount;
     int mcount;
        private  String emailMsgTxt;
        private  String emailSubjectTxt;
        private String emailFromAddress;
// Add List of Email address to who email needs to be sent to
private  String[] emailList;
private  String[] member;
    public Book_Lending_Search_And_View_GUI() {
        initComponents();
        //this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
       //setUndecorated(true);
  //  getRootPane().setWindowDecorationStyle(javax.swing.JRootPane.PLAIN_DIALOG);
    // getContentPane().add(new javax.swing.JPanel());
        setResizable(false);
        rep="";
        gen.setEnabled(false);
        jButton6.setEnabled(false);
        DOT1="";
        DOF1="";
        emailList = new String[100];
        member = new String[100];
        emailMsgTxt = "Please Return Your Book";
        emailSubjectTxt = "OverDue book nortification";
        emailFromAddress = "pubudutennakoon@gmail.com";
        ecount=0;
        mcount=0;
    }   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLayeredPane4 = new javax.swing.JLayeredPane();
        jButton2 = new javax.swing.JButton();
        over = new javax.swing.JRadioButton();
        returned = new javax.swing.JRadioButton();
        notreturned = new javax.swing.JRadioButton();
        all = new javax.swing.JRadioButton();
        DOT = new com.toedter.calendar.JDateChooser();
        DOF = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewtable = new javax.swing.JTable();
        jLayeredPane5 = new javax.swing.JLayeredPane();
        key = new javax.swing.JTextField();
        criteria1 = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        gen = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Book Lend Search And View");

        jLayeredPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Library Management System", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 24))); // NOI18N

        jLayeredPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Book Search And View", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        jLayeredPane4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/view.png"))); // NOI18N
        jButton2.setText("View All");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jButton2.setBounds(80, 10, 240, 30);
        jLayeredPane4.add(jButton2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(over);
        over.setText("Over Due");
        over.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overActionPerformed(evt);
            }
        });
        over.setBounds(40, 70, 80, 23);
        jLayeredPane4.add(over, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(returned);
        returned.setText("Returned ");
        returned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnedActionPerformed(evt);
            }
        });
        returned.setBounds(140, 70, 73, 23);
        jLayeredPane4.add(returned, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(notreturned);
        notreturned.setText("Not Returned");
        notreturned.setBounds(240, 70, 91, 23);
        jLayeredPane4.add(notreturned, javax.swing.JLayeredPane.DEFAULT_LAYER);

        buttonGroup1.add(all);
        all.setText("All");
        all.setBounds(340, 70, 37, 23);
        jLayeredPane4.add(all, javax.swing.JLayeredPane.DEFAULT_LAYER);
        DOT.setBounds(230, 50, 140, 20);
        jLayeredPane4.add(DOT, javax.swing.JLayeredPane.DEFAULT_LAYER);
        DOF.setBounds(50, 50, 140, 20);
        jLayeredPane4.add(DOF, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel2.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel2.setText("To");
        jLabel2.setBounds(210, 50, 20, 20);
        jLayeredPane4.add(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel5.setText("From");
        jLabel5.setBounds(10, 50, 40, 20);
        jLayeredPane4.add(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane4.setBounds(370, 20, 390, 100);
        jLayeredPane2.add(jLayeredPane4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), "View", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 1, 14))); // NOI18N

        viewtable.setFont(new java.awt.Font("Cambria", 0, 14)); // NOI18N
        viewtable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Refence Number", "Member Id", "Book ID", "Borrowed Date", "Due Date", "statues", "Retruned Date", "Late Days", "Fine Ammount"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        viewtable.setToolTipText("");
        viewtable.setEnabled(false);
        jScrollPane1.setViewportView(viewtable);

        jScrollPane1.setBounds(10, 20, 740, 310);
        jLayeredPane3.add(jScrollPane1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane3.setBounds(10, 120, 760, 350);
        jLayeredPane2.add(jLayeredPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane5.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        key.setBounds(110, 20, 130, 20);
        jLayeredPane5.add(key, javax.swing.JLayeredPane.DEFAULT_LAYER);

        criteria1.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        criteria1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select", "Search By Reference", "Search By Member ID", "Search By Book ID", " " }));
        criteria1.setBounds(110, 70, 130, 20);
        jLayeredPane5.add(criteria1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel3.setText("Search Criteria");
        jLabel3.setBounds(10, 70, 90, 20);
        jLayeredPane5.add(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/Search-Search-icon1`.png"))); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jButton1.setBounds(250, 40, 90, 25);
        jLayeredPane5.add(jButton1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel4.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel4.setText("Search Keyword");
        jLabel4.setBounds(10, 20, 100, 20);
        jLayeredPane5.add(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane5.setBounds(10, 20, 350, 100);
        jLayeredPane2.add(jLayeredPane5, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLayeredPane2.setBounds(10, 30, 780, 480);
        jLayeredPane1.add(jLayeredPane2, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/print_icon.png"))); // NOI18N
        jButton6.setText("Send Email Nortifications");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jButton6.setBounds(240, 540, 170, 30);
        jLayeredPane1.add(jButton6, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/reset.gif"))); // NOI18N
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jButton4.setBounds(510, 540, 90, 30);
        jLayeredPane1.add(jButton4, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/back1.png"))); // NOI18N
        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jButton3.setBounds(650, 540, 80, 30);
        jLayeredPane1.add(jButton3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        gen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/print_icon.png"))); // NOI18N
        gen.setText("Genarate Report");
        gen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                genActionPerformed(evt);
            }
        });
        gen.setBounds(60, 540, 160, 30);
        jLayeredPane1.add(gen, javax.swing.JLayeredPane.DEFAULT_LAYER);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/IMG/title ori.jpg"))); // NOI18N

        jMenu2.setText("Navigate");

        jMenuItem8.setText("Home");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem8);

        jMenuItem2.setText("Manage Members");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Manage Books");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Manage Book Lending");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem5.setText("Manage Inventory");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setText("Manage Newspaper Reocords");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setText("Manage User Accounts");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jLayeredPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 583, Short.MAX_VALUE)
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-816)/2, (screenSize.height-724)/2, 816, 724);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
      
        try {
            ecount=0;
        Connection con = DB.myCon();
            Statement S = con.createStatement();
            ResultSet rs3=null;
            
            
        for(int i=0;i<mcount;i++)
        {
            
            if(member[i].charAt(0)=='S')
                        {
                            
                              rs3 = S.executeQuery("SELECT * FROM student WHERE SmemberID='" +member[i]+ "'");
                              
                                if(rs3.next())
                                {
                                  emailList[ecount]=rs3.getString("Email")+",";
                                  
                                   
                                ecount++;
                                
                              
                                }
                        }
             if(member[i].charAt(0)=='T')
                        {
                            
                              rs3 = S.executeQuery("SELECT * FROM teacher WHERE TmemberID='" +member[i]+ "'");
                              
                              if(rs3.next())
                              {
                                  emailList[ecount]=rs3.getString("Email")+",";
                                   
                                    ecount++;
                              }
                         }
            
            
            
        }
                 
                       
                         
                            
                        
            
            
         
            
        String emailReceipeint[] = new String[ecount];
       
        for (int j = 0; j < ecount; j++) {
            emailReceipeint[j] = emailList[j];
            //System.out.println("Actually emails are " + emailReceipeint[j]);
        }


        SendMailUsingAuthentication smtpMailSender = new SendMailUsingAuthentication();
        
            smtpMailSender.postMail(emailReceipeint, emailSubjectTxt, emailMsgTxt, emailFromAddress);
            
            JOptionPane.showMessageDialog(this, "Sucessfully Sent Over Due Nortification to All Members,!","",JOptionPane.INFORMATION_MESSAGE);
                           
        } catch (MessagingException ex) {
            JOptionPane.showMessageDialog(this, ""+ex.getMessage(),"",JOptionPane.ERROR_MESSAGE);
        }
         catch (Exception e) {
                    JOptionPane.showMessageDialog(this, ""+e.getMessage()+" Error,!","",JOptionPane.ERROR_MESSAGE);
                }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void genActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_genActionPerformed
          
            new Thread(new Runnable() {

            @Override
            public void run() {
            
    try 
    {
     
      JasperReport jr = null;
      Connection con = DB.myCon();
      //Map<Object, String> pp = new HashMap<Object, String>();
      HashMap pp = new HashMap();
      
     if(rep.equals("over"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\BookLendOver.jrxml");
             pp.put("DOF", DOF1);
             pp.put("DOT", DOT1);
            JasperPrint jp = JasperFillManager.fillReport(jr, pp, con);
            JasperViewer.viewReport(jp, false);
     }
     else if(rep.equals("returned"))
     {
         String cat=key.getText();
        jr = JasperCompileManager.compileReport("src\\Report\\BookLendReturned.jrxml");
             pp.put("DOF", DOF1);
             pp.put("DOT", DOT1);
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     }
            
      else if(rep.equals("notreturned"))
     {
         String aut=key.getText();
        jr = JasperCompileManager.compileReport("src\\Report\\BookLendNotReturned.jrxml");
        pp.put("DOF", DOF1);
        pp.put("DOT", DOT1);
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     } 
     else if(rep.equals("all"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\BookLendAll.jrxml");
                     pp.put("DOF", DOF1);
                     pp.put("DOT", DOT1);
            JasperPrint jp = JasperFillManager.fillReport(jr, pp, con);
            JasperViewer.viewReport(jp, false);
     }
     else  if(rep.equals("member"))
     {
             jr = JasperCompileManager.compileReport("src\\Report\\BookLendmemberid.jrxml");
             pp.put("mid", key.getText());
            JasperPrint jp = JasperFillManager.fillReport(jr, pp, con);
            JasperViewer.viewReport(jp, false);
     }
      else if(rep.equals("book"))
     {
         String ty=key.getText();
        jr = JasperCompileManager.compileReport("src\\Report\\BookLendbookid.jrxml");
        pp.put("bid", key.getText());
        JasperPrint jp = JasperFillManager.fillReport(jr, pp,con);
            JasperViewer.viewReport(jp, false);
     } 
            
            
            
            
        } catch (Exception e) {
          
            e.printStackTrace();

        }

                   
            }
        }).start();

           
           
    }//GEN-LAST:event_genActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new Search_and_View_Main_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        new Home_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new Manage_Members_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new Manage_Books_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        new Manage_Book_Lending().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        new Manage_Inventory_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        new Manage_Newspaper_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        new Manage_User_GUI().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        DOF.setDate(null);
        DOT.setDate(null);
        key.setText("");
        criteria1.setSelectedItem("Select");
        DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
                tb.setRowCount(0);
                 gen.setEnabled(false);
                 rep="";
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       try {
           
           mcount=0;
           jButton6.setEnabled(false);
                Connection con = DB.myCon();
                Statement S = con.createStatement();
                DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
                tb.setRowCount(0);
                key.setText("");
                criteria1.setSelectedItem("Select");
                DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");   
                String tempemail="";
                String tempid="";
        
          if((DOF.getDate()==null)&&(DOT.getDate()==null))
            {
                
                Date DOF2=new Date(112, 0, 01);
                Date DOT2=new Date();
                
                  DOF1=(String) dateFormat.format(DOF2);
         DOT1=(String) dateFormat.format(DOT2);
                
                 if(over.isSelected())
                {
                    gen.setEnabled(true);
                    jButton6.setEnabled(true);
                    rep ="over"; 
                    Date today=new Date();
                    ResultSet  rs3=null;
                    ResultSet  rs4=null;
                    String D=(String) dateFormat.format(today);
                    
                      
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where duedate < '"+D+"' and statues = 'Borrowed'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where duedate < '"+D+"' and statues = 'Borrowed'");     
                            
                        while (rs.next()) 
                        {
                            
                            
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        member[mcount]=rs.getString("memberid");
                        
                        mcount++;
                       
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   

                         tb.addRow(v);
                         
                         
                         
                        }
                          
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Over Due Book Lend Records!","",JOptionPane.ERROR_MESSAGE);
                        }
                    
            }
            else if(returned.isSelected())
            {
                 gen.setEnabled(true);
                    rep="returned"; 
                    
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where statues = 'Returned'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where statues = 'Returned'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Returned Book Lend Reocords!","",JOptionPane.ERROR_MESSAGE);
                        }
            }
             else if(notreturned.isSelected())
            {
                gen.setEnabled(true);
                rep="notreturned"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where statues='Borrowed'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where statues='Borrowed'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Returned Book Lend Reocords!","",JOptionPane.ERROR_MESSAGE);
                        }
            }
              else if(all.isSelected())
            {
                gen.setEnabled(true);
                rep="all"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM borrow");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No  Book Lend Reocords!","",JOptionPane.ERROR_MESSAGE);
                        }
                }
                else
                {
                 JOptionPane.showMessageDialog(this, "Please Select an option!","",JOptionPane.WARNING_MESSAGE);
                }
            }
         
         else if(((DOF.getDate()==null)||(DOT.getDate()==null)))
         {
                   JOptionPane.showMessageDialog(this, "Please Choose the Date field correctly ", "",JOptionPane.WARNING_MESSAGE);          
         }
         else if((DOF.getDate().compareTo(DOT.getDate())>0))
         {
                   JOptionPane.showMessageDialog(this, "Please Choose the Date field correctly ", "",JOptionPane.WARNING_MESSAGE);          
         }
         
                        
         else
         {
             
            
             DOF1=(String) dateFormat.format(DOF.getDate());
             DOT1=(String) dateFormat.format(DOT.getDate());
            
            if(over.isSelected())
                {
                    gen.setEnabled(true);
                    rep ="over"; 
                    Date today=new Date();
                    
                      
                    String D=(String) dateFormat.format(today);
                    
                      
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where duedate < '"+D+"' and statues = 'Borrowed' and borrowdate between '"+DOF1+"' AND '"+DOT1+"'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where duedate < '"+D+"' and statues = 'Borrowed' and borrowdate between '"+DOF1+"' AND '"+DOT1+"'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Over Due Book Lend Records!","",JOptionPane.ERROR_MESSAGE);
                        }
                    
            }
            else if(returned.isSelected())
            {
                 gen.setEnabled(true);
                    rep="returned"; 
                    
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where statues = 'Returned' and borrowdate between '"+DOF1+"' AND '"+DOT1+"'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where statues = 'Returned' and borrowdate between '"+DOF1+"' AND '"+DOT1+"'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Returned Book Lend Reocords!","",JOptionPane.ERROR_MESSAGE);
                        }
            }
             else if(notreturned.isSelected())
            {
                gen.setEnabled(true);
                rep="notreturned"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where statues='Borrowed' and borrowdate between '"+DOF1+"' AND '"+DOT1+"'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where statues='Borrowed' and borrowdate between '"+DOF1+"' AND '"+DOT1+"'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Returned Book Lend Reocords!","",JOptionPane.ERROR_MESSAGE);
                        }
            }
              else if(all.isSelected())
            {
                gen.setEnabled(true);
                rep="all"; 
                    
                     ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where borrowdate between '"+DOF1+"' AND '"+DOT1+"'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where borrowdate between '"+DOF1+"' AND '"+DOT1+"'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No  Book Lend Reocords!","",JOptionPane.ERROR_MESSAGE);
                        }
                }
                else
                {
                 JOptionPane.showMessageDialog(this, "Please Select an option!","",JOptionPane.WARNING_MESSAGE);
                }
        
        
           
          
         }
          
       }    
     catch(Exception e)
     {
             JOptionPane.showMessageDialog(this, "Error!"+e.getMessage(),"",JOptionPane.ERROR_MESSAGE);
     }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void returnedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_returnedActionPerformed

    private void overActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_overActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
          try {
              
              jButton6.setEnabled(false);
                Connection con = DB.myCon();
                Statement S = con.createStatement();
                DefaultTableModel tb = (DefaultTableModel) viewtable.getModel();
                tb.setRowCount(0);
                String criteria=(String) criteria1.getSelectedItem();
            
                if(criteria.equals("Select")||key.getText().equals(""))
                {
                 JOptionPane.showMessageDialog(this, "Please Select a criteria And enter a Key word!","",JOptionPane.WARNING_MESSAGE);
                }
                else
                {
                    if(criteria.equals("Search By Reference"))
                    {
                        gen.setEnabled(false);
                        int ref=Integer.parseInt(key.getText());
                        
                         
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where refno="+ref);
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where refno="+ref);     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Such Reference Number!","",JOptionPane.ERROR_MESSAGE);
                        }
                        
                        
                    }
                    
                   else if(criteria.equals("Search By Member ID"))
                    {
                        
                        if(!((key.getText().charAt(0)=='S')||(key.getText().charAt(0)=='T')))
                    {
                        JOptionPane.showMessageDialog(this, "Please Enter the ID Correctly!","",JOptionPane.WARNING_MESSAGE);
                    }
                        else
                        {
                        
                         gen.setEnabled(true);
                         rep="member";
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where memberid='"+key.getText()+"'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where memberid='"+key.getText()+"'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Such MemberID!","",JOptionPane.ERROR_MESSAGE);
                        }
                        }
                        
                    }
                    
                    else if(criteria.equals("Search By Book ID"))
                    {
                        
                        if(!(key.getText().charAt(0)=='B'))
                    {
                        JOptionPane.showMessageDialog(this, "Please Enter the ID Correctly!","",JOptionPane.WARNING_MESSAGE);
                    }
                        else
                        {
                        
                        
                         gen.setEnabled(true);
                         rep="book";
                        ResultSet rs1 = S.executeQuery("SELECT * FROM borrow where bookid='"+key.getText()+"'");
                        
                        
                        if(rs1.next())
                        {
                            ResultSet rs = S.executeQuery("SELECT * FROM borrow where bookid='"+key.getText()+"'");     
                            
                        while (rs.next()) 
                        {
                         Vector v = new Vector();

                        v.add(rs.getString("refno"));
                        v.add(rs.getString("memberid"));
                        v.add(rs.getString("bookid"));
                        v.add(rs.getDate("borrowdate"));
                        v.add(rs.getDate("duedate"));
                        v.add(rs.getString("statues"));
                        v.add(rs.getDate("returneddate"));
                        v.add(rs.getString("latedays"));
                        v.add(rs.getString("fineammount"));
   
                         tb.addRow(v);
                        }
                        }
                        else
                        {
                            JOptionPane.showMessageDialog(this, "No Such BookID!","",JOptionPane.ERROR_MESSAGE);
                        }
                        
                        } 
                    }
                    
                }
              
              
              
           

           


          
        } 
          catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, " Enter a number as reference Number!", "", JOptionPane.ERROR_MESSAGE);
        }
          catch (Exception e) {
            JOptionPane.showMessageDialog(this, "" + e.getMessage() + " Error!", "", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Book_Lending_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Book_Lending_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Book_Lending_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Book_Lending_Search_And_View_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Book_Lending_Search_And_View_GUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser DOF;
    private com.toedter.calendar.JDateChooser DOT;
    private javax.swing.JRadioButton all;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox criteria1;
    private javax.swing.JButton gen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLayeredPane jLayeredPane4;
    private javax.swing.JLayeredPane jLayeredPane5;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField key;
    private javax.swing.JRadioButton notreturned;
    private javax.swing.JRadioButton over;
    private javax.swing.JRadioButton returned;
    private javax.swing.JTable viewtable;
    // End of variables declaration//GEN-END:variables
}
